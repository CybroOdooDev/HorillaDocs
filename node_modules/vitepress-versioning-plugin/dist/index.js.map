{"version":3,"sources":["../src/index.ts","../src/rewrites.ts","../src/sidebars.ts","../src/switcher.ts","../src/defaults.ts"],"sourcesContent":["import clc from \"cli-color\";\nimport _ from \"lodash\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport { createLogger } from \"vite\";\nimport { DefaultTheme, UserConfig } from \"vitepress\";\nimport { generateVersionRewrites } from \"./rewrites\";\nimport { generateVersionSidebars } from \"./sidebars\";\nimport { generateVersionSwitcher } from \"./switcher\";\nimport { Versioned } from \"./types\";\nimport { defaultConfig, defaultThemeConfig } from \"./defaults\";\n// import { generateVersionedNavbars } from \"./navbars\";\n\n// TODO: Fix nav bar elements (not versioned) - Seems not to be possible due to VitePress limitation...\n// TODO: Changing version does not preserve language\n// TODO: Change URL format to `/version/lang/file`\n\nexport { Versioned };\n\n/**\n * Processes the default theme config with versioning config.\n * @param config The default theme config with versioning config.\n * @param dirname The value of __dirname when used from any typescript file in the `.vitepress` folder and ONLY the `.vitepress` folder.\n * @returns The default theme config with versioning config.\n */\nexport default function defineVersionedConfig(\n  config: Versioned.Config,\n  dirname: string\n): UserConfig<DefaultTheme.Config> {\n  const logger = createLogger();\n\n  // TODO: Does this convert to UserConfig correctly?\n  const configBackup = { ...config };\n  config = _.defaultsDeep(config, defaultConfig);\n\n  // Load all the versions from the \"versions\" folder.\n  const versions: Versioned.Version[] = [];\n  const versionsFolder = path.resolve(dirname, \"..\", \"versions\");\n\n  if (!fs.existsSync(versionsFolder)) {\n    fs.mkdirSync(versionsFolder);\n    fs.writeFileSync(path.resolve(versionsFolder, \".gitkeep\"), \"\");\n  }\n\n  const versionFolders = fs\n    .readdirSync(versionsFolder, { withFileTypes: true })\n    .filter((dirent) => dirent.isDirectory());\n  versions.push(...versionFolders.map((dirent) => dirent.name));\n\n  // Convert all `VersionedThemeConfig`s to `DefaultTheme.Config`s\n  for (let themeConfig of [\n    config.themeConfig,\n    ...Object.values(config.locales ?? {}).map((locale) => locale.themeConfig),\n  ]) {\n    if (!themeConfig) continue;\n\n    themeConfig = _.defaultsDeep(\n      themeConfig,\n      defaultThemeConfig\n    ) as Versioned.ThemeConfig;\n\n    // // Generate navbars\n    // themeConfig.nav = [\n    //   ...themeConfig.nav ?? [],\n    //   ...generateVersionedNavbars(\n    //     config.versioning.navbars!,\n    //     dirname,\n    //     versions,\n    //     Object.keys(config.locales ?? {})\n    //   ).flat(),\n    // ]\n\n    // console.log(themeConfig.nav)\n\n    // Generate the version switcher\n    const versionSwitcher = generateVersionSwitcher(\n      themeConfig.versionSwitcher!,\n      versions,\n      config.versioning.latestVersion!\n    );\n    if (versionSwitcher) {\n      themeConfig.nav ??= [];\n      themeConfig.nav.push(versionSwitcher);\n    }\n\n    // Add versioning props to navbar items\n    if (themeConfig.nav) {\n      themeConfig.nav = themeConfig.nav.map((item: any) => {\n        if (item.component) {\n          item.props ??= {};\n          item.props.versioningPlugin = {\n            versions,\n            latestVersion: config.versioning.latestVersion!,\n          };\n        }\n        return item;\n      });\n    }\n\n    // Generate the sidebars\n    if (Array.isArray(themeConfig.sidebar)) {\n      logger.error(\n        clc.red(`[vitepress-plugin-versioning]`) +\n          \" The sidebar cannot be an array. Please use a DefaultTheme.MultiSidebar object where the root ('/') is your array.\"\n      );\n      logger.info(\n        clc.yellow(`[vitepress-plugin-versioning]`) +\n          \" Versioned sidebar preperation failed, disabling versioning.\"\n      );\n      return configBackup; // TODO: This entirely disables versioning, is this intentional?\n    } else {\n      themeConfig.sidebar = {\n        ...themeConfig.sidebar,\n        ...generateVersionSidebars(\n          config.versioning.sidebars!,\n          dirname,\n          versions,\n          Object.keys(config.locales ?? {})\n        ),\n      };\n    }\n  }\n\n  // Generate the rewrites\n  config.rewrites = {\n    ...config.rewrites,\n    ...generateVersionRewrites(\n      config.versioning.rewrites!,\n      dirname,\n      versions,\n      Object.keys(config.locales ?? {})\n    ),\n  };\n\n  try {\n    if(config.versioning.sidebars) {\n      if(config.versioning.sidebars.sidebarContentProcessor) {\n        // For all sidebars, in locales and main themeConfig\n        for (const locale of Object.keys(config.locales ?? {})) {\n          if(config.locales?.[locale]?.themeConfig) {\n            // @ts-ignore\n            config.locales[locale].themeConfig.sidebar = config.versioning.sidebars.sidebarContentProcessor!(config.locales[locale].themeConfig.sidebar as DefaultTheme.SidebarMulti);\n          } \n        }\n      }\n    }\n  } catch (e) {\n    logger.error(\"Something went wrong when processing the sidebar content.\")\n    logger.error(e as any);\n    logger.info(\"Reverting to pre-processed sidebar configs.\");\n  }\n\n  // For all components within themeConfig.nav and locale.themeConfig.nav, insert version information into the props.\n  if(config?.themeConfig?.nav) {\n  \n    // Recursive map function to process all items in the nav bar.\n    const processNavbarItemRecursive = (navbarItem: any): DefaultTheme.NavItem => {\n    \n      if (navbarItem?.items) {\n        navbarItem.items = navbarItem.items.map((item: any) =>\n          processNavbarItemRecursive(item)\n        ) as (DefaultTheme.NavItemWithLink | DefaultTheme.NavItemChildren)[];\n      }\n\n      if (navbarItem?.component) {\n        navbarItem.props ??= {};\n        navbarItem.props.versioningPlugin = {\n          versions,\n          latestVersion: config.versioning.latestVersion!,\n        }\n      }\n    \n      return navbarItem;\n    }\n\n    // Process all items in the nav bar.\n    config.themeConfig.nav = config.themeConfig.nav.map((item) => processNavbarItemRecursive(item));\n  }\n\n\n  return config;\n}\n","import fs from \"node:fs\";\nimport path from \"node:path\";\nimport { Versioned } from \"./types\";\n\nfunction getFilesRecursively(dirname: string, locales: string[]): string[] {\n  let files: string[] = [];\n\n  for (const entry of fs.readdirSync(dirname, { withFileTypes: true })) {\n    const entryPath = `${dirname}/${entry.name}`;\n\n    if (entry.isDirectory()) {\n      // Skip the locale folders\n      // TODO: some projects may place translations in paths different to this\n      if (locales.includes(entry.name)) {\n        continue;\n      }\n\n      files = [...files, ...getFilesRecursively(entryPath, locales)];\n    } else {\n      files.push(entryPath);\n    }\n  }\n\n  return files;\n}\n\n/**\n * Generates vitepress rewrites for all versions in the \"versions\" folder.\n * The rewrites are used to format the URLs in `versions` to be more user-friendly.\n * @returns {Record<string, string>} A map of rewrite sources to their destinations.\n */\nexport function generateVersionRewrites(\n  config: Versioned.RewritesConfig | false,\n  dirname: string,\n  versions: Versioned.Version[],\n  locales: string[] = []\n): Record<string, string> {\n  const versionRewrites: Record<string, string> = {};\n  if (config === false) return versionRewrites;\n\n  const versionsDir = path.resolve(dirname, \"..\", \"versions\");\n\n  // Generate rewrites for each version's files.\n  for (const version of versions) {\n    // Get all files recursively in the version folder\n    const files = getFilesRecursively(\n      path.resolve(versionsDir, version),\n      locales\n    );\n\n    for (const rewriteSource of files.map((filePath) =>\n      filePath.replace(versionsDir, \"versions\")\n    )) {\n      versionRewrites[rewriteSource] = config.rewriteProcessor!(\n        rewriteSource,\n        version\n      );\n    }\n\n    // Manage locale rewrites\n    for (const locale of locales) {\n      const versionLocalePath = path.resolve(\n        versionsDir,\n        version,\n        config.localePrefix!,\n        locale\n      );\n\n      if (!fs.existsSync(versionLocalePath)) continue;\n\n      const localeFiles = getFilesRecursively(\n        path.resolve(versionsDir, version, config.localePrefix!, locale),\n        locales\n      );\n\n      const localeRewriteSources = localeFiles.map((filePath) =>\n        filePath.replace(versionsDir, \"versions\")\n      );\n\n      for (const rewriteSource of localeRewriteSources) {\n        versionRewrites[`${rewriteSource}`] = config.localeRewriteProcessor!(\n          rewriteSource,\n          version,\n          locale\n        ).replace(`/${config.localePrefix!}`, \"\");\n      }\n    }\n  }\n\n  // console.log(versionRewrites)\n\n  return versionRewrites;\n}\n","import JSON5 from \"json5\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport { DefaultTheme } from \"vitepress\";\nimport { Versioned } from \"./types\";\n\n/**\n * Replaces all links in the sidebar with their versioned equivalents.\n * @example `{link: '/test'}` becomes `{link: '/0.1.0/test'}`\n * @param sidebar The sidebar to replace links in.\n * @param version The version to prepend to all links.\n * @returns {DefaultTheme.SidebarItem[]} The sidebar with all links prepended with the version.\n */\nfunction replaceLinksRecursive(\n  sidebar: Versioned.SidebarItem[],\n  config: Versioned.SidebarConfig,\n  version: Versioned.Version\n): DefaultTheme.SidebarItem[] {\n  // Prepend the version to all links. `{VERSION}/$link`\n  return sidebar.map((item) => {\n    if (item.process === false) {\n      return item;\n    }\n\n    if (item.link) {\n      item.link = config.sidebarUrlProcessor!(item.link, version);\n    }\n\n    if (item.items) {\n      item.items = replaceLinksRecursive(item.items, config, version);\n    }\n\n    return item;\n  });\n}\n\n/**\n * Gets the sidebar for a specific version.\n * This function will look for a sidebar.json file in the specified version's folder, or else return an empty sidebar.\n * @param version Get the sidebar for a specific version.\n * @returns {DefaultTheme.SidebarItem[]} The sidebar for the specified version.\n */\nfunction getSidebar(\n  config: Versioned.SidebarConfig,\n  dirname: string,\n  version: Versioned.Version,\n  locale: string\n): DefaultTheme.Sidebar {\n  const sidebarPath = path.resolve(\n    dirname,\n    \"..\",\n    config.sidebarPathResolver!(\n      version + (locale === \"root\" ? \"\" : `-${locale}`)\n    )\n  );\n\n  if (fs.existsSync(sidebarPath)) {\n    const sidebar = JSON5.parse(fs.readFileSync(sidebarPath, \"utf-8\"));\n\n    if (Array.isArray(sidebar)) {\n      // Replace all links in the sidebar with their versioned equivalents.\n      return replaceLinksRecursive(\n        sidebar as Versioned.SidebarItem[],\n        config,\n        (locale === \"root\" ? \"\" : `${locale}/`) + version\n      );\n    } else {\n      // Must be a multisidebar instance.\n      const multiSidebar = sidebar as DefaultTheme.SidebarMulti;\n\n      // Replace all links in the sidebar with their versioned equivalents.\n      Object.keys(multiSidebar).forEach((key) => {\n        multiSidebar[key] = replaceLinksRecursive(\n          multiSidebar[key] as Versioned.SidebarItem[],\n          config,\n          (locale === \"root\" ? \"\" : `${locale}/`) + version\n        );\n      });\n\n      return multiSidebar;\n    }\n  }\n\n  return [];\n}\n\n/**\n * Generates a sidebar for each version in the \"versions\" folder.\n * @returns {DefaultTheme.SidebarMulti} A map of versions to their sidebars.\n */\nexport function generateVersionSidebars(\n  config: Versioned.SidebarConfig | false,\n  dirname: string,\n  versions: Versioned.Version[],\n  locales: string[]\n): DefaultTheme.SidebarMulti {\n  const versionSidebars: DefaultTheme.SidebarMulti = {};\n  if (config === false) return versionSidebars;\n\n  for (const version of versions) {\n    for (const locale of locales) {\n      const sidebar = getSidebar(config, dirname, version, locale);\n\n      if (Array.isArray(sidebar)) {\n        versionSidebars[\n          (locale === \"root\" ? \"\" : `/${locale}`) + `/${version}`\n        ] = sidebar;\n      } else {\n        Object.keys(sidebar).forEach((key) => {\n          versionSidebars[\n            (locale === \"root\" ? \"\" : `/${locale}`) + `/${version}${key}`\n          ] = (sidebar as DefaultTheme.SidebarMulti)[key];\n        });\n      }\n    }\n  }\n\n  return versionSidebars;\n}\n","import { DefaultTheme } from \"vitepress\";\nimport { Versioned } from \"./types\";\n\n/**\n * Generates a nav item for the version switcher, which contains all versions in the \"versions\" folder and the latest version.\n * @returns {DefaultTheme.NavItem} A nav item that contains all versions in the \"versions\" folder.\n */\nexport function generateVersionSwitcher(\n  config: Versioned.SwitcherConfig | false,\n  versions: Versioned.Version[],\n  latestVersion: Versioned.Version | null\n): DefaultTheme.NavItem | null {\n  if (config === false) {\n    return null;\n  }\n\n  const versionSwitcher: DefaultTheme.NavItem = {\n    text: config.text,\n    items: [],\n  };\n\n  if (config.includeLatestVersion) {\n    versionSwitcher.items.push({\n      text: latestVersion === null ? \"Latest\" : `${latestVersion} (latest)`,\n      link: \"/\",\n    });\n  }\n\n  for (const version of versions) {\n    versionSwitcher.items.push({\n      text: version,\n      link: `/${version}/`,\n    });\n  }\n\n  return versionSwitcher;\n}\n","import { Versioned } from \"./types\";\n\nconst defaultThemeConfig: Versioned.ThemeConfig = {\n  versionSwitcher: {\n    text: \"Switch Version\",\n    includeLatestVersion: true,\n  },\n};\n\nconst defaultConfig: Versioned.Config = {\n  versioning: {\n    latestVersion: null,\n    sidebars: {\n      processSidebarURLs: true,\n      sidebarPathResolver: (version: Versioned.Version) =>\n        `.vitepress/sidebars/versioned/${version}.json`,\n      sidebarUrlProcessor: (url: string, version: Versioned.Version) =>\n        `/${version}${url}`,\n    },\n    // navbars: {\n    //   processNavbarURLs: true,\n    //   navbarUrlProcessor: (url: string, version: Version) =>\n    //     `/${version}${url}`,\n    //   navbarPathResolver: (version: Version) =>\n    //     `.vitepress/navbars/versioned/${version}.json`,\n    // },\n    rewrites: {\n      localePrefix: \"\",\n      localeRewriteProcessor: (\n        inputFilePath: string,\n        _version: Versioned.Version,\n        locale: string\n      ) =>\n        `${locale}/` +\n        inputFilePath.replace(\"versions/\", \"\").replace(`${locale}/`, \"\"),\n      rewriteProcessor: (inputFilePath: string, _version: Versioned.Version) =>\n        inputFilePath.replace(\"versions/\", \"\"),\n    },\n  },\n};\n\nexport { defaultConfig, defaultThemeConfig };"],"mappings":"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","names":["fs","path","fs","path","path","fs","_a"]}